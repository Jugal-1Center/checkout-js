{"version":3,"file":"shipping-257be59b.js","mappings":"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","sources":["webpack://checkout/./packages/core/src/app/shipping/errors/UnassignItemError.ts","webpack://checkout/./packages/core/src/app/address/AddressFormModal.tsx","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemInvalidAddressError.ts","webpack://checkout/./packages/core/src/app/shipping/errors/AssignItemFailedError.ts","webpack://checkout/./packages/core/src/app/shipping/ItemAddressSelect.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingFormFooter.tsx","webpack://checkout/./packages/core/src/app/shipping/updateShippableItems.ts","webpack://checkout/./packages/core/src/app/shipping/MultiShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/BillingSameAsShippingField.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressForm.tsx","webpack://checkout/./packages/core/src/app/shipping/StaticAddressEditable.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingAddressFields.ts","webpack://checkout/./packages/core/src/app/shipping/SingleShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/ShippingHeader.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddressDisplay.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeStateMapper.ts","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingAddress.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShippingForm.tsx","webpack://checkout/./packages/core/src/app/shipping/stripeUPE/StripeShipping.tsx","webpack://checkout/./packages/core/src/app/shipping/Shipping.tsx"],"sourcesContent":["import { CustomError, setPrototypeOf } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class UnassignItemError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'UNASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.unassign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, UnassignItemError.prototype);\n    }\n}\n","import { Country, FormField } from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { FunctionComponent } from 'react';\nimport { lazy } from 'yup';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString, withLanguage, WithLanguageProps } from '../locale';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Form } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\nimport { Modal, ModalHeader } from '../ui/modal';\n\nimport AddressForm from './AddressForm';\nimport getAddressFormFieldsValidationSchema from './getAddressFormFieldsValidationSchema';\nimport { AddressFormValues } from './mapAddressToFormValues';\n\nexport interface AddressFormModalProps extends AddressFormProps {\n    isOpen: boolean;\n    onAfterOpen?(): void;\n}\n\nexport interface AddressFormProps {\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    shouldShowSaveAddress?: boolean;\n    defaultCountryCode?: string;\n    useFloatingLabel?: boolean;\n    getFields(countryCode?: string): FormField[];\n    onSaveAddress(address: AddressFormValues): void;\n    onRequestClose?(): void;\n}\n\nconst SaveAddress: FunctionComponent<\n    AddressFormProps & WithLanguageProps & FormikProps<AddressFormValues>\n> = ({\n    googleMapsApiKey,\n    getFields,\n    countriesWithAutocomplete,\n    countries,\n    values,\n    setFieldValue,\n    isLoading,\n    onRequestClose,\n    useFloatingLabel,\n}) => (\n    <Form autoComplete=\"on\">\n        <LoadingOverlay isLoading={isLoading}>\n            <AddressForm\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                countryCode={values.countryCode}\n                formFields={getFields(values.countryCode)}\n                googleMapsApiKey={googleMapsApiKey}\n                setFieldValue={setFieldValue}\n                shouldShowSaveAddress={false}\n                useFloatingLabel={useFloatingLabel}\n            />\n            <div className=\"form-actions\">\n                <a\n                    className=\"button optimizedCheckout-buttonSecondary\"\n                    href=\"#\"\n                    onClick={preventDefault(onRequestClose)}\n                >\n                    <TranslatedString id=\"common.cancel_action\" />\n                </a>\n\n                <Button\n                    disabled={isLoading}\n                    id=\"checkout-save-address\"\n                    type=\"submit\"\n                    variant={ButtonVariant.Primary}\n                >\n                    <TranslatedString id=\"address.save_address_action\" />\n                </Button>\n            </div>\n        </LoadingOverlay>\n    </Form>\n);\n\nconst SaveAddressForm = withLanguage(\n    withFormik<AddressFormProps & WithLanguageProps, AddressFormValues>({\n        handleSubmit: (values, { props: { onSaveAddress } }) => {\n            onSaveAddress(values);\n        },\n        mapPropsToValues: ({ defaultCountryCode = '' }) => ({\n            firstName: '',\n            lastName: '',\n            address1: '',\n            address2: '',\n            customFields: {},\n            country: '',\n            countryCode: defaultCountryCode,\n            stateOrProvince: '',\n            stateOrProvinceCode: '',\n            postalCode: '',\n            phone: '',\n            city: '',\n            company: '',\n            shouldSaveAddress: false,\n        }),\n        validationSchema: ({ language, getFields }: AddressFormProps & WithLanguageProps) =>\n            lazy<Partial<AddressFormValues>>((values) =>\n                getAddressFormFieldsValidationSchema({\n                    language,\n                    formFields: getFields(values && values.countryCode),\n                }),\n            ),\n    })(SaveAddress),\n);\n\nconst AddressFormModal: FunctionComponent<AddressFormModalProps> = ({\n    isOpen,\n    onAfterOpen,\n    onRequestClose,\n    ...addressFormProps\n}) => (\n    <Modal\n        additionalModalClassName=\"modal--medium\"\n        header={\n            <ModalHeader>\n                <TranslatedString id=\"address.add_address_heading\" />\n            </ModalHeader>\n        }\n        isOpen={isOpen}\n        onAfterOpen={onAfterOpen}\n        onRequestClose={onRequestClose}\n        shouldShowCloseButton={true}\n    >\n        <SaveAddressForm {...addressFormProps} onRequestClose={onRequestClose} />\n    </Modal>\n);\n\nexport default AddressFormModal;\n","import { CustomError, setPrototypeOf } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class AssignItemInvalidAddressError extends CustomError {\n    constructor(data?: Error) {\n        super({\n            name: 'ASSIGN_ITEM_INVALID_ADDRESS',\n            message: getLanguageService().translate('shipping.assign_item_invalid_address_error'),\n            title: getLanguageService().translate(\n                'shipping.assign_item_invalid_address_error_heading',\n            ),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemInvalidAddressError.prototype);\n    }\n}\n","import { CustomError, setPrototypeOf } from '../../common/error';\nimport { getLanguageService } from '../../locale';\n\nexport default class AssignItemFailedError extends CustomError {\n    constructor(data: Error) {\n        super({\n            name: 'ASSIGN_ITEM_FAILED',\n            message: getLanguageService().translate('shipping.assign_item_error'),\n            data,\n        });\n\n        setPrototypeOf(this, AssignItemFailedError.prototype);\n    }\n}\n","import { Address, CustomerAddress } from '@bigcommerce/checkout-sdk';\nimport React, { FunctionComponent, memo, useCallback } from 'react';\n\nimport { AddressSelect } from '../address';\n\nimport ShippableItem from './ShippableItem';\n\nexport interface ItemAddressSelectProps {\n    item: ShippableItem;\n    addresses: CustomerAddress[];\n    onSelectAddress(address: Address, itemId: string, itemKey: string): void;\n    onUseNewAddress(address: Address | undefined, itemId: string, itemKey: string): void;\n}\n\nconst ItemAddressSelect: FunctionComponent<ItemAddressSelectProps> = ({\n    item: { id, key, imageUrl, quantity, name, options, consignment },\n    addresses,\n    onSelectAddress,\n    onUseNewAddress,\n}) => {\n    const handleUseNewAddress = useCallback(\n        (address: Address) => {\n            onUseNewAddress(address, id as string, key);\n        },\n        [id, onUseNewAddress, key],\n    );\n\n    const handleSelectAddress = useCallback(\n        (address: Address) => {\n            onSelectAddress(address, id as string, key);\n        },\n        [id, key, onSelectAddress],\n    );\n\n    return (\n        <div className=\"consignment\">\n            <figure className=\"consignment-product-figure\">\n                {imageUrl && <img alt={name} src={imageUrl} />}\n            </figure>\n\n            <div className=\"consignment-product-body\">\n                <h4 className=\"optimizedCheckout-contentPrimary\">{`${quantity} x ${name}`}</h4>\n\n                {(options || []).map(({ name: optionName, value, nameId }) => (\n                    <ul\n                        className=\"product-options optimizedCheckout-contentSecondary\"\n                        data-test=\"consigment-item-product-options\"\n                        key={nameId}\n                    >\n                        <li className=\"product-option\">{`${optionName} ${value}`}</li>\n                    </ul>\n                ))}\n\n                <AddressSelect\n                    addresses={addresses}\n                    onSelectAddress={handleSelectAddress}\n                    onUseNewAddress={handleUseNewAddress}\n                    selectedAddress={consignment && consignment.shippingAddress}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default memo(ItemAddressSelect);\n","import React, { PureComponent, ReactNode } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { OrderComments } from '../orderComments';\nimport { Alert, AlertType } from '../ui/alert';\nimport { Button, ButtonVariant } from '../ui/button';\nimport { Fieldset, Legend } from '../ui/form';\n\nimport { ShippingOptions } from './shippingOption';\n\nexport interface ShippingFormFooterProps {\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowShippingOptions?: boolean;\n    shouldDisableSubmit: boolean;\n    isLoading: boolean;\n    renderFooter: Boolean;\n}\n\nclass ShippingFormFooter extends PureComponent<ShippingFormFooterProps> {\n    render(): ReactNode {\n        const {\n            cartHasChanged,\n            isMultiShippingMode,\n            shouldShowOrderComments,\n            shouldShowShippingOptions = true,\n            shouldDisableSubmit,\n            isLoading,\n            renderFooter,\n        } = this.props;\n\n        return (\n            <>\n                {renderFooter && <Fieldset\n                    id=\"checkout-shipping-options\"\n                    legend={\n                        <>\n                            <Legend>\n                                <TranslatedString id=\"shipping.shipping_method_label\" />\n                            </Legend>\n\n                            {cartHasChanged && (\n                                <Alert type={AlertType.Error}>\n                                    <strong>\n                                        <TranslatedString id=\"shipping.cart_change_error\" />\n                                    </strong>\n                                </Alert>\n                            )}\n                        </>\n                    }\n                >\n                    <ShippingOptions\n                        isMultiShippingMode={isMultiShippingMode}\n                        isUpdatingAddress={isLoading}\n                        shouldShowShippingOptions={shouldShowShippingOptions}\n                    />\n                </Fieldset> }\n\n                {renderFooter && shouldShowOrderComments && <OrderComments />}\n\n                <div className=\"form-actions\">\n                    <Button\n                        disabled={shouldDisableSubmit}\n                        id=\"checkout-shipping-continue\"\n                        isLoading={isLoading}\n                        type=\"submit\"\n                        variant={ButtonVariant.Primary}\n                    >\n                        <TranslatedString id=\"common.continue_action\" />\n                    </Button>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default ShippingFormFooter;\n","import { Address, Cart, Consignment } from '@bigcommerce/checkout-sdk';\n\nimport { isEqualAddress } from '../address';\n\nimport findConsignment from './findConsignment';\nimport ShippableItem from './ShippableItem';\n\nexport interface UpdateItemParams {\n    updatedItemIndex: number;\n    address: Address;\n}\n\nexport default function updateShippableItems(\n    items: ShippableItem[],\n    { updatedItemIndex, address }: UpdateItemParams,\n    { cart, consignments }: { cart?: Cart; consignments?: Consignment[] },\n): ShippableItem[] | undefined {\n    if (updatedItemIndex < 0 || updatedItemIndex >= items.length || !cart) {\n        return;\n    }\n\n    const cartItemIds = cart.lineItems.physicalItems.map(({ id }) => id);\n\n    const updatedConsignment = (consignments || []).find((consignment) =>\n        isEqualAddress(consignment.shippingAddress, address),\n    );\n\n    const newId = findNewItemId(items[updatedItemIndex], cart, updatedConsignment);\n\n    return items.map((item, i) => {\n        if ((newId && !cartItemIds.includes(item.id)) || i === updatedItemIndex) {\n            const itemId = newId ?? item.id;\n\n            return {\n                ...item,\n                id: itemId,\n                consignment: findConsignment(consignments || [], itemId as string),\n            };\n        }\n\n        return item;\n    });\n}\n\nfunction findNewItemId(\n    item: ShippableItem,\n    cart?: Cart,\n    consignment?: Consignment,\n): string | undefined {\n    if (!cart || !consignment) {\n        return;\n    }\n\n    const { physicalItems } = cart.lineItems;\n    const matchingCartItems = physicalItems.filter(\n        ({ productId, variantId }) => productId === item.productId && variantId === item.variantId,\n    );\n\n    const matchingCartItemIds = matchingCartItems.map(({ id }) => id);\n\n    return consignment.lineItemIds.find((id) => matchingCartItemIds.includes(id));\n}\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutSelectors,\n    CheckoutStoreSelector,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    CustomerAddress,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport {\n    AddressFormModal,\n    AddressFormValues,\n    isValidAddress,\n    mapAddressFromFormValues,\n} from '../address';\nimport { preventDefault } from '../common/dom';\nimport { ErrorModal } from '../common/error';\nimport { TranslatedLink, TranslatedString, withLanguage, WithLanguageProps } from '../locale';\nimport { Form } from '../ui/form';\n\nimport { AssignItemFailedError, AssignItemInvalidAddressError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippableLineItems from './getShippableLineItems';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport hasUnassignedLineItems from './hasUnassignedLineItems';\nimport ItemAddressSelect from './ItemAddressSelect';\nimport ShippableItem from './ShippableItem';\nimport ShippingFormFooter from './ShippingFormFooter';\nimport updateShippableItems from './updateShippableItems';\n\nexport interface MultiShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    customerMessage: string;\n    isGuest: boolean;\n    isLoading: boolean;\n    shouldShowOrderComments: boolean;\n    defaultCountryCode?: string;\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    shouldShowAddAddressInCheckout: boolean;\n    useFloatingLabel?: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): void;\n    onSignIn(): void;\n    getFields(countryCode?: string): FormField[];\n    onSubmit(values: MultiShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n    renderForm: Boolean;\n    renderFooter: Boolean;\n}\n\ninterface ShippableItemId {\n    key: string;\n    itemId: string;\n}\n\nexport interface MultiShippingFormState {\n    items: ShippableItem[];\n    itemAddingAddress?: ShippableItemId;\n    createCustomerAddressError?: Error;\n}\n\nclass MultiShippingForm extends PureComponent<\n    MultiShippingFormProps & WithLanguageProps & FormikProps<MultiShippingFormValues>,\n    MultiShippingFormState\n> {\n    static getDerivedStateFromProps(\n        { cart, consignments }: MultiShippingFormProps,\n        state: MultiShippingFormState,\n    ) {\n        if (!state || !state.items || getShippableItemsCount(cart) !== state.items.length) {\n            return { items: getShippableLineItems(cart, consignments) };\n        }\n\n        return null;\n    }\n\n    state: MultiShippingFormState = { items: [] };\n\n    render(): ReactNode {\n        const {\n            addresses,\n            consignments,\n            cart,\n            isGuest,\n            onSignIn,\n            onCreateAccount,\n            cartHasChanged,\n            shouldShowOrderComments,\n            isLoading,\n            getFields,\n            defaultCountryCode,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            useFloatingLabel,\n            renderForm,\n            renderFooter\n        } = this.props;\n\n        const { items, itemAddingAddress, createCustomerAddressError } = this.state;\n\n        if (isGuest) {\n            return (\n                <div className=\"checkout-step-info\">\n                    <TranslatedString id=\"shipping.multishipping_guest_intro\" />{' '}\n                    <a\n                        data-test=\"shipping-sign-in-link\"\n                        href=\"#\"\n                        onClick={preventDefault(onSignIn)}\n                    >\n                        <TranslatedString id=\"shipping.multishipping_guest_sign_in\" />\n                    </a>{' '}\n                    <TranslatedLink\n                        id=\"shipping.multishipping_guest_create\"\n                        onClick={onCreateAccount}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <>\n                <ErrorModal\n                    error={createCustomerAddressError}\n                    message={\n                        <>\n                            <TranslatedString id=\"address.consignment_address_updated_text\" />{' '}\n                            <TranslatedString id=\"customer.create_address_error\" />\n                        </>\n                    }\n                    onClose={this.handleCloseErrorModal}\n                    shouldShowErrorCode={false}\n                />\n                <AddressFormModal\n                    countries={countries}\n                    countriesWithAutocomplete={countriesWithAutocomplete}\n                    defaultCountryCode={defaultCountryCode}\n                    getFields={getFields}\n                    googleMapsApiKey={googleMapsApiKey}\n                    isLoading={isLoading}\n                    isOpen={!!itemAddingAddress}\n                    onRequestClose={this.handleCloseAddAddressForm}\n                    onSaveAddress={this.handleSaveAddress}\n                    useFloatingLabel={useFloatingLabel}\n                />\n\n                <Form>\n                    { renderForm && <ul className=\"consignmentList\">\n                        {items.map((item) => (\n                            <li key={item.key}>\n                                <ItemAddressSelect\n                                    addresses={addresses}\n                                    item={item}\n                                    onSelectAddress={this.handleSelectAddress}\n                                    onUseNewAddress={this.handleUseNewAddress}\n                                />\n                            </li>\n                        ))}\n                    </ul> }\n\n                    <ShippingFormFooter\n                        cartHasChanged={cartHasChanged}\n                        isLoading={isLoading}\n                        isMultiShippingMode={true}\n                        shouldDisableSubmit={this.shouldDisableSubmit()}\n                        shouldShowOrderComments={shouldShowOrderComments}\n                        shouldShowShippingOptions={\n                            !hasUnassignedLineItems(consignments, cart.lineItems)\n                        }\n                        renderFooter={renderFooter}\n                    />\n                </Form>\n            </>\n        );\n    }\n\n    private handleCloseErrorModal: () => void = () => {\n        this.setState({ createCustomerAddressError: undefined });\n    };\n\n    private handleSaveAddress: (address: AddressFormValues) => void = async (address) => {\n        const { createCustomerAddress } = this.props;\n        const { itemAddingAddress } = this.state;\n\n        if (!itemAddingAddress) {\n            return;\n        }\n\n        const shippingAddress = mapAddressFromFormValues(address);\n\n        await this.handleSelectAddress(\n            shippingAddress,\n            itemAddingAddress.itemId,\n            itemAddingAddress.key,\n        );\n\n        try {\n            await createCustomerAddress(shippingAddress);\n        } catch (error) {\n            if (error instanceof Error) {\n                this.setState({ createCustomerAddressError: error });\n            }\n        }\n\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string, itemKey: string) => void = (\n        address,\n        itemId,\n        itemKey,\n    ) => {\n        const { onUseNewAddress, shouldShowAddAddressInCheckout } = this.props;\n\n        if (!shouldShowAddAddressInCheckout) {\n            onUseNewAddress(address, itemId);\n\n            return;\n        }\n\n        this.setState({\n            itemAddingAddress: {\n                key: itemKey,\n                itemId,\n            },\n        });\n    };\n\n    private handleCloseAddAddressForm: () => void = () => {\n        this.setState({\n            itemAddingAddress: undefined,\n        });\n    };\n\n    private handleSelectAddress: (\n        address: Address,\n        itemId: string,\n        itemKey: string,\n    ) => Promise<void> = async (address, itemId, itemKey) => {\n        const { assignItem, onUnhandledError, getFields } = this.props;\n\n        if (!isValidAddress(address, getFields(address.countryCode))) {\n            return onUnhandledError(new AssignItemInvalidAddressError());\n        }\n\n        try {\n            const { data } = await assignItem({\n                address,\n                lineItems: [\n                    {\n                        itemId,\n                        quantity: 1,\n                    },\n                ],\n            });\n\n            this.syncItems(itemKey, address, data);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(new AssignItemFailedError(error));\n            }\n        }\n    };\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments } = this.props;\n\n        return isLoading || !hasSelectedShippingOptions(consignments);\n    };\n\n    private syncItems: (key: string, address: Address, data: CheckoutStoreSelector) => void = (\n        key,\n        address,\n        data,\n    ) => {\n        const { items: currentItems } = this.state;\n        const items = updateShippableItems(\n            currentItems,\n            {\n                updatedItemIndex: currentItems.findIndex((item) => item.key === key),\n                address,\n            },\n            {\n                cart: data.getCart(),\n                consignments: data.getConsignments(),\n            },\n        );\n\n        if (items) {\n            this.setState({ items });\n        }\n    };\n}\n\nexport interface MultiShippingFormValues {\n    orderComment: string;\n}\n\nexport default withLanguage(\n    withFormik<MultiShippingFormProps & WithLanguageProps, MultiShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({ customerMessage }) => ({\n            orderComment: customerMessage,\n        }),\n        enableReinitialize: true,\n    })(MultiShippingForm),\n);\n","import React, { FunctionComponent, memo, useMemo } from 'react';\n\nimport { TranslatedString } from '../locale';\nimport { CheckboxFormField } from '../ui/form';\n\nexport interface BillingSameAsShippingFieldProps {\n    onChange?(isChecked: boolean): void;\n}\n\nconst BillingSameAsShippingField: FunctionComponent<BillingSameAsShippingFieldProps> = ({\n    onChange,\n}) => {\n    const labelContent = useMemo(\n        () => <TranslatedString id=\"billing.use_shipping_address_label\" />,\n        [],\n    );\n\n    return (\n        <CheckboxFormField\n            id=\"sameAsBilling\"\n            labelContent={labelContent}\n            name=\"billingSameAsShipping\"\n            onChange={onChange}\n        />\n    );\n};\n\nexport default memo(BillingSameAsShippingField);\n","import {\n    Address,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n} from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { AddressForm, AddressSelect, isValidCustomerAddress } from '../address';\nimport { connectFormik, ConnectFormikProps } from '../common/form';\nimport { Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingAddressFormProps {\n    addresses: CustomerAddress[];\n    address?: Address;\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    formFields: FormField[];\n    shouldShowSaveAddress?: boolean;\n    useFloatingLabel?: boolean;\n    onUseNewAddress(): void;\n    onFieldChange(fieldName: string, value: string): void;\n    onAddressSelect(address: Address): void;\n}\n\nconst addressFieldName = 'shippingAddress';\n\nclass ShippingAddressForm extends Component<\n    ShippingAddressFormProps & ConnectFormikProps<SingleShippingFormValues>\n> {\n    render(): ReactNode {\n        const {\n            addresses,\n            address: shippingAddress,\n            onAddressSelect,\n            onUseNewAddress,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            formFields,\n            isLoading,\n            googleMapsApiKey,\n            useFloatingLabel,\n            formik: {\n                values: { shippingAddress: formAddress },\n            },\n        } = this.props;\n\n        const hasAddresses = addresses && addresses.length > 0;\n        const hasValidCustomerAddress = isValidCustomerAddress(\n            shippingAddress,\n            addresses,\n            formFields,\n        );\n\n        return (\n            <Fieldset id=\"checkoutShippingAddress\">\n                {hasAddresses && (\n                    <Fieldset id=\"shippingAddresses\">\n                        <LoadingOverlay isLoading={isLoading}>\n                            <AddressSelect\n                                addresses={addresses}\n                                onSelectAddress={onAddressSelect}\n                                onUseNewAddress={onUseNewAddress}\n                                selectedAddress={\n                                    hasValidCustomerAddress ? shippingAddress : undefined\n                                }\n                            />\n                        </LoadingOverlay>\n                    </Fieldset>\n                )}\n\n                {!hasValidCustomerAddress && (\n                    <LoadingOverlay isLoading={isLoading} unmountContentWhenLoading>\n                        <AddressForm\n                            countries={countries}\n                            countriesWithAutocomplete={countriesWithAutocomplete}\n                            countryCode={formAddress && formAddress.countryCode}\n                            fieldName={addressFieldName}\n                            formFields={formFields}\n                            googleMapsApiKey={googleMapsApiKey}\n                            onAutocompleteToggle={this.handleAutocompleteToggle}\n                            onChange={this.handleChange}\n                            setFieldValue={this.setFieldValue}\n                            shouldShowSaveAddress={shouldShowSaveAddress}\n                            useFloatingLabel={useFloatingLabel}\n                        />\n                    </LoadingOverlay>\n                )}\n            </Fieldset>\n        );\n    }\n\n    private setFieldValue: (fieldName: string, fieldValue: string) => void = (\n        fieldName,\n        fieldValue,\n    ) => {\n        const {\n            formik: { setFieldValue },\n            formFields,\n        } = this.props;\n\n        const customFormFieldNames = formFields\n            .filter((field) => field.custom)\n            .map((field) => field.name);\n\n        const formFieldName = customFormFieldNames.includes(fieldName)\n            ? `customFields.${fieldName}`\n            : fieldName;\n\n        setFieldValue(`${addressFieldName}.${formFieldName}`, fieldValue);\n    };\n\n    private handleChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        const { onFieldChange } = this.props;\n\n        onFieldChange(fieldName, value);\n    };\n\n    private handleAutocompleteToggle: (state: { inputValue: string; isOpen: boolean }) => void = ({\n        isOpen,\n        inputValue,\n    }) => {\n        const { onFieldChange } = this.props;\n\n        if (!isOpen) {\n            onFieldChange('address1', inputValue);\n        }\n    };\n}\n\nexport default connectFormik(ShippingAddressForm);\n","import {\n    Address,\n    CheckoutSelectors,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nimport { StaticAddress } from '../address/';\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { Button, ButtonSize, ButtonVariant } from '../ui/button';\nimport { DynamicFormField, Fieldset } from '../ui/form';\nimport { LoadingOverlay } from '../ui/loading';\n\nimport './StaticAddressEditable.scss';\n\nexport interface StaticAddressEditableProps {\n    address: Address;\n    buttonId: string;\n    formFields: FormField[];\n    isLoading: boolean;\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onFieldChange(fieldName: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StaticAddressEditable extends PureComponent<StaticAddressEditableProps> {\n    async componentDidMount(): Promise<void> {\n        const { initialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const { deinitialize, methodId, onUnhandledError = noop } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n        const { address, buttonId, formFields, isLoading } = this.props;\n\n        const customFormFields = formFields.filter(({ custom }) => custom);\n        const shouldShowCustomFormFields = customFormFields.length > 0;\n\n        return (\n            <LoadingOverlay isLoading={isLoading}>\n                <div className=\"stepHeader\" style={{ padding: 0 }}>\n                    <div className=\"stepHeader-body subheader\">\n                        <StaticAddress address={address} />\n                    </div>\n\n                    <div className=\"stepHeader-actions subheader\">\n                        <Button\n                            id={buttonId}\n                            onClick={preventDefault()}\n                            size={ButtonSize.Tiny}\n                            testId=\"step-edit-button\"\n                            variant={ButtonVariant.Secondary}\n                        >\n                            <TranslatedString id=\"common.edit_action\" />\n                        </Button>\n                    </div>\n                </div>\n\n                {shouldShowCustomFormFields && (\n                    <Fieldset id=\"customFieldset\">\n                        {customFormFields.map((field) => (\n                            <DynamicFormField\n                                field={field}\n                                key={`${field.id}-${field.name}`}\n                                onChange={this.handleFieldValueChange(field.name)}\n                                parentFieldName=\"shippingAddress.customFields\"\n                            />\n                        ))}\n                    </Fieldset>\n                )}\n            </LoadingOverlay>\n        );\n    }\n\n    private handleFieldValueChange: (name: string) => (value: string) => void =\n        (name) => (value) => {\n            const { onFieldChange } = this.props;\n\n            onFieldChange(name, value);\n        };\n}\n\nexport default StaticAddressEditable;\n","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FunctionComponent, memo, useCallback, useContext } from 'react';\n\nimport { FormContext } from '../ui/form';\n\nimport ShippingAddressForm from './ShippingAddressForm';\nimport StaticAddressEditable from './StaticAddressEditable';\n\nexport interface ShippingAddressProps {\n    addresses: CustomerAddress[];\n    consignments: Consignment[];\n    countries?: Country[];\n    countriesWithAutocomplete: string[];\n    formFields: FormField[];\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    hasRequestedShippingOptions: boolean;\n    useFloatingLabel?: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onFieldChange(name: string, value: string): void;\n    onUnhandledError?(error: Error): void;\n    onUseNewAddress(): void;\n}\n\nconst ShippingAddress: FunctionComponent<ShippingAddressProps> = (props) => {\n    const {\n        methodId,\n        formFields,\n        countries,\n        countriesWithAutocomplete,\n        consignments,\n        googleMapsApiKey,\n        onAddressSelect,\n        onFieldChange,\n        onUseNewAddress,\n        initialize,\n        deinitialize,\n        isLoading,\n        shippingAddress,\n        hasRequestedShippingOptions,\n        addresses,\n        shouldShowSaveAddress,\n        isShippingStepPending,\n        useFloatingLabel,\n    } = props;\n\n    const { setSubmitted } = useContext(FormContext);\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const handleFieldChange: (fieldName: string, value: string) => void = (fieldName, value) => {\n        if (hasRequestedShippingOptions) {\n            setSubmitted(true);\n        }\n\n        onFieldChange(fieldName, value);\n    };\n\n    if (methodId) {\n        let options: ShippingInitializeOptions = {};\n\n        if (methodId === 'amazonpay' && shippingAddress) {\n            const editAddressButtonId = 'edit-ship-button';\n\n            options = {\n                amazonpay: {\n                    editAddressButtonId,\n                },\n            };\n\n            return (\n                <StaticAddressEditable\n                    address={shippingAddress}\n                    buttonId={editAddressButtonId}\n                    deinitialize={deinitialize}\n                    formFields={formFields}\n                    initialize={initializeShipping(options)}\n                    isLoading={isShippingStepPending}\n                    methodId={methodId}\n                    onFieldChange={onFieldChange}\n                />\n            );\n        }\n    }\n\n    return (\n        <ShippingAddressForm\n            address={shippingAddress}\n            addresses={addresses}\n            consignments={consignments}\n            countries={countries}\n            countriesWithAutocomplete={countriesWithAutocomplete}\n            formFields={formFields}\n            googleMapsApiKey={googleMapsApiKey}\n            isLoading={isLoading}\n            onAddressSelect={onAddressSelect}\n            onFieldChange={handleFieldChange}\n            onUseNewAddress={onUseNewAddress}\n            shouldShowSaveAddress={shouldShowSaveAddress}\n            useFloatingLabel={useFloatingLabel}\n        />\n    );\n};\n\nexport default memo(ShippingAddress);\n","export const SHIPPING_ADDRESS_FIELDS = [\n    'address1',\n    'postalCode',\n    'countryCode',\n    'city',\n    'stateOrProvince',\n    'stateOrProvinceCode',\n];\n","import {\n    Address,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    CustomerAddress,\n    CustomerRequestOptions,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport { debounce, noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport {\n    AddressFormValues,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    isEqualAddress,\n    mapAddressFromFormValues,\n    mapAddressToFormValues,\n} from '../address';\nimport { getCustomFormFieldsValidationSchema } from '../formFields';\nimport { withLanguage, WithLanguageProps } from '../locale';\nimport { Fieldset, Form, FormContext } from '../ui/form';\n\nimport BillingSameAsShippingField from './BillingSameAsShippingField';\nimport hasSelectedShippingOptions from './hasSelectedShippingOptions';\nimport ShippingAddress from './ShippingAddress';\nimport { SHIPPING_ADDRESS_FIELDS } from './ShippingAddressFields';\nimport ShippingFormFooter from './ShippingFormFooter';\n\nexport interface SingleShippingFormProps {\n    addresses: CustomerAddress[];\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    useFloatingLabel?: boolean;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n    renderForm: Boolean;\n    renderFooter: Boolean;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isResettingAddress: boolean;\n    isUpdatingShippingData: boolean;\n    hasRequestedShippingOptions: boolean;\n}\n\nexport const SHIPPING_AUTOSAVE_DELAY = 1700;\n\nclass SingleShippingForm extends PureComponent<\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n> {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isResettingAddress: false,\n        isUpdatingShippingData: false,\n        hasRequestedShippingOptions: false,\n    };\n\n    private debouncedUpdateAddress: any;\n\n    constructor(\n        props: SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>,\n    ) {\n        super(props);\n\n        const { updateAddress } = this.props;\n\n        this.debouncedUpdateAddress = debounce(\n            async (address: Address, includeShippingOptions: boolean) => {\n                try {\n                    await updateAddress(address, {\n                        params: {\n                            include: {\n                                'consignments.availableShippingOptions': includeShippingOptions,\n                            },\n                        },\n                    });\n\n                    if (includeShippingOptions) {\n                        this.setState({ hasRequestedShippingOptions: true });\n                    }\n                } finally {\n                    this.setState({ isUpdatingShippingData: false });\n                }\n            },\n            SHIPPING_AUTOSAVE_DELAY,\n        );\n    }\n\n    render(): ReactNode {\n        const {\n            addresses,\n            cartHasChanged,\n            isLoading,\n            onUnhandledError,\n            methodId,\n            shouldShowSaveAddress,\n            countries,\n            countriesWithAutocomplete,\n            googleMapsApiKey,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            values: { shippingAddress: addressForm },\n            isShippingStepPending,\n            useFloatingLabel,\n            renderForm,\n            renderFooter,\n        } = this.props;\n\n        const { isResettingAddress, isUpdatingShippingData, hasRequestedShippingOptions } =\n            this.state;\n\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n        const shouldShowBillingSameAsShipping = !PAYMENT_METHOD_VALID.some(\n            (method) => method === methodId,\n        );\n\n        return (\n            <Form autoComplete=\"on\">\n                { renderForm && <Fieldset>\n                    <ShippingAddress\n                        addresses={addresses}\n                        consignments={consignments}\n                        countries={countries}\n                        countriesWithAutocomplete={countriesWithAutocomplete}\n                        deinitialize={deinitialize}\n                        formFields={this.getFields(addressForm && addressForm.countryCode)}\n                        googleMapsApiKey={googleMapsApiKey}\n                        hasRequestedShippingOptions={hasRequestedShippingOptions}\n                        initialize={initialize}\n                        isLoading={isResettingAddress}\n                        isShippingStepPending={isShippingStepPending}\n                        methodId={methodId}\n                        onAddressSelect={this.handleAddressSelect}\n                        onFieldChange={this.handleFieldChange}\n                        onUnhandledError={onUnhandledError}\n                        onUseNewAddress={this.onUseNewAddress}\n                        shippingAddress={shippingAddress}\n                        shouldShowSaveAddress={shouldShowSaveAddress}\n                        useFloatingLabel={useFloatingLabel}\n                    />\n                    {shouldShowBillingSameAsShipping && (\n                        <div className=\"form-body\">\n                            <BillingSameAsShippingField />\n                        </div>\n                    )}\n                </Fieldset> }\n\n                <ShippingFormFooter\n                    cartHasChanged={cartHasChanged}\n                    isLoading={isLoading || isUpdatingShippingData}\n                    isMultiShippingMode={false}\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\n                    shouldShowOrderComments={shouldShowOrderComments}\n                    shouldShowShippingOptions={isValid}\n                    renderFooter={renderFooter}\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isValid } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleFieldChange: (name: string) => void = async (name) => {\n        const { setFieldValue } = this.props;\n\n        if (name === 'countryCode') {\n            setFieldValue('shippingAddress.stateOrProvince', '');\n            setFieldValue('shippingAddress.stateOrProvinceCode', '');\n        }\n\n        // Enqueue the following code to run after Formik has run validation\n        await new Promise((resolve) => setTimeout(resolve));\n\n        const isShippingField = SHIPPING_ADDRESS_FIELDS.includes(name);\n\n        const { hasRequestedShippingOptions } = this.state;\n\n        const { isValid } = this.props;\n\n        if (!isValid) {\n            return;\n        }\n\n        this.updateAddressWithFormData(isShippingField || !hasRequestedShippingOptions);\n    };\n\n    private updateAddressWithFormData(includeShippingOptions: boolean) {\n        const {\n            shippingAddress,\n            values: { shippingAddress: addressForm },\n        } = this.props;\n\n        const updatedShippingAddress = addressForm && mapAddressFromFormValues(addressForm);\n\n        if (!updatedShippingAddress || isEqualAddress(updatedShippingAddress, shippingAddress)) {\n            return;\n        }\n\n        this.setState({ isUpdatingShippingData: true });\n        this.debouncedUpdateAddress(updatedShippingAddress, includeShippingOptions);\n    }\n\n    private handleAddressSelect: (address: Address) => void = async (address) => {\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address,\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private onUseNewAddress: () => void = async () => {\n        const { deleteConsignments, onUnhandledError = noop, setValues, values } = this.props;\n\n        this.setState({ isResettingAddress: true });\n\n        try {\n            const address = await deleteConsignments();\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address && address.countryCode),\n                    address,\n                ),\n            });\n        } catch (e) {\n            onUnhandledError(e);\n        } finally {\n            this.setState({ isResettingAddress: false });\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const { getFields } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(\n    withFormik<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({\n            getFields,\n            shippingAddress,\n            isBillingSameAsShipping,\n            customerMessage,\n        }) => ({\n            billingSameAsShipping: isBillingSameAsShipping,\n            orderComment: customerMessage,\n            shippingAddress: mapAddressToFormValues(\n                getFields(shippingAddress && shippingAddress.countryCode),\n                shippingAddress,\n            ),\n        }),\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\n            !!shippingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(shippingAddress.countryCode),\n            }).isValidSync(shippingAddress),\n        validationSchema: ({\n            language,\n            getFields,\n            methodId,\n        }: SingleShippingFormProps & WithLanguageProps) =>\n            methodId\n                ? object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getCustomFormFieldsValidationSchema({\n                              translate: getTranslateAddressError(language),\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  })\n                : object({\n                      shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                          getAddressFormFieldsValidationSchema({\n                              language,\n                              formFields: getFields(formValues && formValues.countryCode),\n                          }),\n                      ),\n                  }),\n        enableReinitialize: false,\n    })(SingleShippingForm),\n);\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    CustomerAddress,\n    CustomerRequestOptions,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport { withLanguage, WithLanguageProps } from '../locale';\n\nimport MultiShippingForm, { MultiShippingFormValues } from './MultiShippingForm';\nimport SingleShippingForm, { SingleShippingFormValues } from './SingleShippingForm';\n\nexport interface ShippingFormProps {\n    addresses: CustomerAddress[];\n    cart: Cart;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customerMessage: string;\n    googleMapsApiKey?: string;\n    isBillingSameAsShipping: boolean;\n    isGuest: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowSaveAddress?: boolean;\n    shouldShowOrderComments: boolean;\n    shouldShowAddAddressInCheckout: boolean;\n    useFloatingLabel?: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onCreateAccount(): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    onMultiShippingSubmit(values: MultiShippingFormValues): void;\n    onSignIn(): void;\n    onSingleShippingSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError(error: Error): void;\n    onUseNewAddress(address: Address, itemId: string): void;\n    signOut(options?: CustomerRequestOptions): void;\n    updateAddress(\n        address: Partial<Address>,\n        options: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n    renderForm: Boolean;\n    renderFooter: Boolean;\n}\n\nclass ShippingForm extends Component<ShippingFormProps & WithLanguageProps> {\n    render(): ReactNode {\n        const {\n            addresses,\n            assignItem,\n            cart,\n            cartHasChanged,\n            createCustomerAddress,\n            consignments,\n            countries,\n            countriesWithAutocomplete,\n            onCreateAccount,\n            customerMessage,\n            deinitialize,\n            deleteConsignments,\n            getFields,\n            googleMapsApiKey,\n            initialize,\n            isBillingSameAsShipping,\n            isGuest,\n            isLoading,\n            isMultiShippingMode,\n            methodId,\n            onMultiShippingSubmit,\n            onSignIn,\n            onSingleShippingSubmit,\n            onUnhandledError,\n            onUseNewAddress,\n            shippingAddress,\n            shouldShowOrderComments,\n            shouldShowSaveAddress,\n            shouldShowAddAddressInCheckout,\n            signOut,\n            updateAddress,\n            isShippingStepPending,\n            useFloatingLabel,\n            renderForm,\n            renderFooter,\n        } = this.props;\n\n        return isMultiShippingMode ? (\n            <MultiShippingForm\n                addresses={addresses}\n                assignItem={assignItem}\n                cart={cart}\n                cartHasChanged={cartHasChanged}\n                consignments={consignments}\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                createCustomerAddress={createCustomerAddress}\n                customerMessage={customerMessage}\n                defaultCountryCode={shippingAddress?.countryCode}\n                getFields={getFields}\n                googleMapsApiKey={googleMapsApiKey}\n                isGuest={isGuest}\n                isLoading={isLoading}\n                onCreateAccount={onCreateAccount}\n                onSignIn={onSignIn}\n                onSubmit={onMultiShippingSubmit}\n                onUnhandledError={onUnhandledError}\n                onUseNewAddress={onUseNewAddress}\n                shouldShowAddAddressInCheckout={shouldShowAddAddressInCheckout}\n                shouldShowOrderComments={shouldShowOrderComments}\n                useFloatingLabel={useFloatingLabel}\n                renderForm={renderForm}\n                renderFooter={renderFooter}\n            />\n        ) : (\n            <SingleShippingForm\n                addresses={addresses}\n                cartHasChanged={cartHasChanged}\n                consignments={consignments}\n                countries={countries}\n                countriesWithAutocomplete={countriesWithAutocomplete}\n                customerMessage={customerMessage}\n                deinitialize={deinitialize}\n                deleteConsignments={deleteConsignments}\n                getFields={getFields}\n                googleMapsApiKey={googleMapsApiKey}\n                initialize={initialize}\n                isBillingSameAsShipping={isBillingSameAsShipping}\n                isLoading={isLoading}\n                isMultiShippingMode={isMultiShippingMode}\n                isShippingStepPending={isShippingStepPending}\n                methodId={methodId}\n                onSubmit={onSingleShippingSubmit}\n                onUnhandledError={onUnhandledError}\n                shippingAddress={shippingAddress}\n                shouldShowOrderComments={shouldShowOrderComments}\n                shouldShowSaveAddress={shouldShowSaveAddress}\n                signOut={signOut}\n                updateAddress={updateAddress}\n                useFloatingLabel={useFloatingLabel}\n                renderForm={renderForm}\n                renderFooter={renderFooter}\n            />\n        );\n    }\n}\n\nexport default withLanguage(ShippingForm);\n","import React, { FunctionComponent, memo } from 'react';\n\nimport { preventDefault } from '../common/dom';\nimport { TranslatedString } from '../locale';\nimport { Legend } from '../ui/form';\n\ninterface ShippingHeaderProps {\n    isMultiShippingMode: boolean;\n    isGuest: boolean;\n    shouldShowMultiShipping: boolean;\n    onMultiShippingChange(): void;\n}\n\nconst ShippingHeader: FunctionComponent<ShippingHeaderProps> = ({\n    isMultiShippingMode,\n    isGuest,\n    onMultiShippingChange,\n    shouldShowMultiShipping,\n}) => (\n    <div className=\"form-legend-container\">\n        <Legend testId=\"shipping-address-heading\">\n            <TranslatedString\n                id={\n                    isMultiShippingMode\n                        ? isGuest\n                            ? 'shipping.multishipping_address_heading_guest'\n                            : 'shipping.multishipping_address_heading'\n                        : 'shipping.shipping_address_heading'\n                }\n            />\n        </Legend>\n\n        {shouldShowMultiShipping && (\n            <a\n                data-test=\"shipping-mode-toggle\"\n                href=\"#\"\n                onClick={preventDefault(onMultiShippingChange)}\n            >\n                <TranslatedString\n                    id={isMultiShippingMode ? 'shipping.ship_to_single' : 'shipping.ship_to_multi'}\n                />\n            </a>\n        )}\n    </div>\n);\n\nexport default memo(ShippingHeader);\n","import { CheckoutSelectors, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\n\nexport interface StripeupeShippingAddressProps {\n    methodId?: string;\n    deinitialize(options?: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options?: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onUnhandledError?(error: Error): void;\n}\n\nclass StripeShippingAddressDisplay extends PureComponent<StripeupeShippingAddressProps> {\n    async componentDidMount(): Promise<void> {\n        const {\n            initialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await initialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    async componentWillUnmount(): Promise<void> {\n        const {\n            deinitialize,\n            methodId,\n            onUnhandledError = noop,\n        } = this.props;\n\n        try {\n            await deinitialize({ methodId });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    }\n\n    render(): ReactNode {\n\n        return (\n            <>\n                <div className=\"stepHeader\" style={ { padding: 0 } }>\n                    <div id=\"StripeUpeShipping\" style={ { width: '100%' } } />\n                </div>\n                <br />\n            </>\n        );\n    }\n}\n\nexport default StripeShippingAddressDisplay;\n","interface StripeCountryMapping {\n    [key: string]: StripeStateMapping;\n}\n\ninterface StripeStateMapping {\n    [key: string]: string;\n}\n\nexport default function StripeStateMapper(country: string, state: string): string {\n\n    const countries: StripeCountryMapping = {\n        'MX': {\n            'Ags.': 'AGU',\n            'B.C.': 'BCN',\n            'B.C.S.': 'BCS',\n            'Camp.': 'CAM',\n            'Coah.': 'COA',\n            'Col.': 'COL',\n            'Chis.': 'CHP',\n            'Chih.': 'CHH',\n            'Dgo.': 'DUR',\n            'Gto.': 'GUA',\n            'Gro.': 'GRO',\n            'Hgo.': 'HID',\n            'Jal.': 'JAL',\n            'Méx.': 'MEX',\n            'CDMX': 'MEX',\n            'Mich.': 'MIC',\n            'Mor.': 'MOR',\n            'Nay.': 'NAY',\n            'N.L.': 'NLE',\n            'Oax.': 'OAX',\n            'Pue.': 'PUE',\n            'Qro.': 'QUE',\n            'Q.R.': 'ROO',\n            'S.L.P.': 'SLP',\n            'Sin.': 'SIN',\n            'Son.': 'SON',\n            'Tab.': 'TAB',\n            'Tamps.': 'TAM',\n            'Tlax.': 'TLA',\n            'Ver.': 'VER',\n            'Yuc.': 'YUC',\n            'Zac.': 'ZAC',\n        },\n        'AR': {\n            'Ciudad Autónoma de Buenos Aires': 'C',\n            'Buenos Aires': 'B',\n            'Catamarca': 'K',\n            'Chaco': 'H',\n            'Chubut': 'U',\n            'Córdoba': 'X',\n            'Corrientes': 'W',\n            'Entre Ríos': 'E',\n            'Formosa': 'P',\n            'Jujuy': 'Y',\n            'La Pampa': 'L',\n            'La Rioja': 'F',\n            'Mendoza': 'M',\n            'Misiones': 'N',\n            'Neuquén': 'Q',\n            'Salta': 'A',\n            'San Juan': 'J',\n            'San Luis': 'D',\n            'Santa Fe': 'S',\n            'Santiago del Estero': 'G',\n            'Tierra del Fuego': 'V',\n            'Tucumán': 'W',\n        },\n        'IN': {\n            'Andhra Pradesh': 'AP',\n            'Arunachal Pradesh': 'AR',\n            'Assam': 'AS',\n            'Bihar': 'BR',\n            'Chhattisgarh': 'CG',\n            'Goa': 'GA',\n            'Gujarat': 'GJ',\n            'Haryana': 'HR',\n            'Himachal Pradesh': 'HP',\n            'Jammu and Kashmir': 'JK',\n            'Jharkhand': 'JH',\n            'Karnataka': 'KA',\n            'Kerala': 'KL',\n            'Madhya Pradesh': 'MP',\n            'Maharashtra': 'MH',\n            'Manipur': 'MN',\n            'Meghalaya': 'ML',\n            'Mizoram': 'MZ',\n            'Nagaland': 'NL',\n            'Odisha': 'OR',\n            'Punjab': 'PB',\n            'Rajasthan': 'RJ',\n            'Sikkim': 'SK',\n            'Tamil Nadu': 'TN',\n            'Tripura': 'TR',\n            'Uttarakhand': 'UK',\n            'Uttar Pradesh': 'UP',\n            'West Bengal': 'WB',\n            'Andaman and Nicobar Islands': 'AN',\n            'Chandigarh': 'CH',\n            'Dadra and Nagar Haveli and Daman and Diu': 'DN',\n            'Lakshadweep': 'LD',\n            'Delhi': 'DL',\n            'Puducherry': 'PY',\n            'Telangana': 'TS',\n        },\n        'ID': {\n            'Bali': 'BA',\n            'Banten': 'BT',\n            'Bengkulu': 'BE',\n            'Aceh': 'DA',\n            'DKI Jakarta': 'JK',\n            'Sumatera Utara': 'SU',\n            'Sumatera Barat': 'SB',\n            'Riau': 'SI',\n            'Jambi': 'JA',\n            'Sumatera Selatan': 'SS',\n            'Lampung': 'LA',\n            'Jawa Barat': 'JB',\n            'Jawa Timur': 'JT',\n            'Daerah Istimewa Yogyakarta': 'DY',\n            'Kalimantan Barat': 'KB',\n            'Kalimantan Tengah': 'KT',\n            'Kalimantan Timur': 'KI',\n            'Kalimantan Selatan': 'KS',\n            'Nusa Tenggara Barat': 'NB',\n            'Nusa Tenggara Timur': 'NT',\n            'Sulawesi Selatan': 'SN',\n            'Sulawesi Tengah': 'ST',\n            'Sulawesi Utara': 'SA',\n            'Sulawesi Tenggara': 'SG',\n            'Maluku': 'MA',\n            'Maluku Utara': 'MU',\n            'Gorontalo': 'GO',\n        },\n        'MY': {\n            'Johor': 'JHR',\n            'Kedah': 'KDH',\n            'Kelantan': 'KTN',\n            'Melaka': 'MLK',\n            'Negeri Sembilan': 'NSN',\n            'Pahang': 'PHG',\n            'Pulau Pinang': 'PNG',\n            'Perak': 'PRK',\n            'Perlis': 'PLS',\n            'Selangor': 'SGR',\n            'Terengganu': 'TRG',\n            'Sabah': 'SBH',\n            'Sarawak': 'SRW',\n            'Kuala Lumpur': 'KUL',\n            'Labuan': 'LBN',\n            'Putrajaya': 'PJY',\n        },\n        'IE': {\n            'Carlow': 'CW',\n            'Cavan': 'CN',\n            'Clare': 'CE',\n            'Donegal': 'DL',\n            'Dublin': 'D',\n            'Galway': 'G',\n            'Kildare': 'KE',\n            'Kilkenny': 'KK',\n            'Laois': 'LS',\n            'Leitrim': 'LM',\n            'Longford': 'LD',\n            'Louth': 'LH',\n            'Mayo': 'MO',\n            'Meath': 'MH',\n            'Monaghan': 'MN',\n            'Offaly': 'OY',\n            'Roscommon': 'RN',\n            'Sligo': 'SO',\n            'Tipperary': 'TA',\n            'Waterford': 'WD',\n            'Westmeath': 'WH',\n            'Wexford': 'WX',\n            'Wicklow': 'WW',\n        },\n        'ES': {\n            'C': 'ACOR',\n            'VI': 'ALAV',\n            'AB': 'ALBA',\n            'A': 'ALIC',\n            'AL': 'ALME',\n            'O': 'ASTU',\n            'AV': 'AVIL',\n            'BA': 'BADA',\n            'PM': 'BALE',\n            'B': 'BARC',\n            'BU': 'BURG',\n            'CC': 'CACE',\n            'CA': 'CADI',\n            'S': 'CANT',\n            'CS': 'CAST',\n            'CE': 'CEUT',\n            'CR': 'CIUD',\n            'CO': 'CORD',\n            'CU': 'CUEN',\n            'GI': 'GIRO',\n            'GR': 'GRAN',\n            'GU': 'GUAD',\n            'SS': 'GUIP',\n            'H': 'HUEL',\n            'HU': 'HUES',\n            'J': 'JAEN',\n            'LO': 'LAR',\n            'GC': 'LAS',\n            'LE': 'LEON',\n            'L': 'LLEI',\n            'LU': 'LUGO',\n            'M': 'MADR',\n            'MA': 'MALA',\n            'ML': 'MELI',\n            'MU': 'MURC',\n            'NA': 'NAVA',\n            'OR': 'OURE',\n            'P': 'PALE',\n            'PO': 'PONT',\n            'SA': 'SALA',\n            'TF': 'SANT',\n            'SG': 'SEGO',\n            'SE': 'SEVI',\n            'SO': 'SORI',\n            'T': 'TARR',\n            'TE': 'TERU',\n            'TP': 'TOLE',\n            'V': 'VALE',\n            'VA': 'VALL',\n            'BI': 'VIZC',\n            'ZA': 'ZAMO',\n            'Z': 'ZARA',\n        }\n    };\n\n    if (countries[country]) {\n        return countries[country][state] ?? getStripeState(countries[country], state);\n    }\n\n    return state;\n}\n\nfunction getStripeState(stateList: StripeStateMapping, state: string) {\n    return Object.keys(stateList).find(key => stateList[key] === state) || state;\n}\n","import {\n    Address,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n    StripeShippingEvent\n} from '@bigcommerce/checkout-sdk';\nimport { memoizeOne } from '@bigcommerce/memoize';\nimport React, { FunctionComponent, memo, useCallback, useEffect, useState } from 'react';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport { getAppliedStyles } from '../../common/dom';\nimport getRecommendedShippingOption from '../getRecommendedShippingOption';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport { SingleShippingFormValues } from '../SingleShippingForm';\n\nimport StripeShippingAddressDisplay from './StripeShippingAddressDisplay';\nimport StripeStateMapper from './StripeStateMapper';\n\nexport interface StripeShippingAddressProps {\n    consignments: Consignment[];\n    countries?: Country[];\n    shippingAddress?: Address;\n    step: CheckoutStepStatus;\n    isShippingMethodLoading: boolean;\n    shouldDisableSubmit: boolean;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onAddressSelect(address: Address): void;\n    onSubmit(values: SingleShippingFormValues): void;\n}\n\nconst StripeShippingAddress: FunctionComponent<StripeShippingAddressProps> = (props) => {\n    const {\n        countries,\n        consignments,\n        onAddressSelect,\n        initialize,\n        deinitialize,\n        shouldDisableSubmit,\n        onSubmit,\n        step,\n        isStripeLoading,\n        isStripeAutoStep,\n        isShippingMethodLoading,\n        shippingAddress,\n    } = props;\n\n    const [isNewAddress, setIsNewAddress] = useState(true);\n    const [isFirstShippingRender, setIsFirstShippingRender] = useState(true);\n    const [stripeShippingAddress, setStripeShippingAddress] =  useState({\n        firstName: '',\n        lastName: '',\n        company: '',\n        address1: '',\n        address2: '',\n        city: '',\n        stateOrProvince: '',\n        stateOrProvinceCode: '',\n        shouldSaveAddress: true,\n        country: '',\n        countryCode: '',\n        postalCode: '',\n        phone: '',\n        customFields: [],\n    });\n\n    const handleLoading = useCallback(() => {\n        if (isStripeLoading) {\n            isStripeLoading();\n        }\n    }, [isStripeLoading]);\n\n    useEffect(() => {\n        if (consignments[0]) {\n            const {availableShippingOptions} = consignments[0];\n\n            if (availableShippingOptions && !getRecommendedShippingOption(availableShippingOptions)) {\n                handleLoading();\n            }\n        }\n    }, [consignments]);\n\n    useEffect(() => {\n        const hasStripeAddressAndHasShippingOptions = stripeShippingAddress.firstName && hasSelectedShippingOptions(consignments);\n        const afterReload = !isFirstShippingRender && !isNewAddress && !isShippingMethodLoading;\n        const isLoadingBeforeAutoStep =  isStripeLoading && isStripeAutoStep;\n\n        if (hasStripeAddressAndHasShippingOptions && afterReload && isLoadingBeforeAutoStep) {\n            isStripeLoading();\n            isStripeAutoStep();\n            onSubmit({billingSameAsShipping: true, shippingAddress: stripeShippingAddress, orderComment: ''});\n        }\n    }, [isFirstShippingRender, onSubmit, stripeShippingAddress, shouldDisableSubmit, isShippingMethodLoading, isNewAddress ,consignments]);\n\n    const availableShippingList = countries?.map(country => ({code: country.code, name: country.name}));\n    const allowedCountries = availableShippingList ? availableShippingList.map(country => country.code).join(', ') : '';\n    const shouldShowContent = (isNewAddress = true, phoneFieldRequired: boolean, phone: string) => {\n        const stepCompleted = step.isComplete;\n        const shippingPopulated = shippingAddress?.firstName && isNewAddress;\n        const PhoneRequiredAndNotFilled = phoneFieldRequired && !phone;\n\n        return stepCompleted || shippingPopulated || PhoneRequiredAndNotFilled;\n    };\n\n    const handleStripeShippingAddress = useCallback(async (shipping: StripeShippingEvent) => {\n        const {complete, phoneFieldRequired, value: { address = { country: '', state: '', line1: '', line2: '', city: '', postal_code: '' }\n            , name = '', firstName = '', lastName = '', phone = '' } } = shipping;\n\n        if (complete) {\n            if (shouldShowContent(shipping?.isNewAddress, phoneFieldRequired, phone)) {\n                handleLoading();\n            }\n\n            const names = name?.split(' ');\n\n            // @ts-ignore\n            const country = availableShippingList?.find(country => country.code === address.country).name;\n            const state = StripeStateMapper(address.country, address.state);\n            const shippingValue = {\n                firstName: firstName || names[0],\n                lastName: lastName || names[1],\n                company: '',\n                address1: address.line1,\n                address2: address.line2 || '',\n                city: address.city,\n                stateOrProvince: state,\n                stateOrProvinceCode: state,\n                shouldSaveAddress: true,\n                country: country || address.country,\n                countryCode: address.country,\n                postalCode: address.postal_code,\n                phone: phone || '',\n                customFields: [],\n            };\n\n            if (!step.isComplete) {\n                setIsFirstShippingRender(current => !current);\n            }\n\n            onAddressSelect(shippingValue);\n            setStripeShippingAddress(shippingValue);\n\n            if (shipping.isNewAddress !== isNewAddress) {\n                setIsNewAddress(current => !current);\n            }\n        } else {\n            handleLoading();\n        }\n\n    }, [availableShippingList, onAddressSelect]);\n\n    const initializeShipping = useCallback(\n        memoizeOne(\n            (defaultOptions: ShippingInitializeOptions) => (options?: ShippingInitializeOptions) =>\n                initialize({\n                    ...defaultOptions,\n                    ...options,\n                }),\n        ),\n        [],\n    );\n\n    const getStylesFromElement = (\n        id: string,\n        properties: string[]) => {\n        const parentContainer = document.getElementById(id);\n\n        if (parentContainer) {\n            return getAppliedStyles(parentContainer, properties);\n        }\n\n        return undefined;\n    };\n\n    const getStripeStyles: any = useCallback( () => {\n        const containerId = 'stripe-card-component-field';\n        const formInput = getStylesFromElement(`${containerId}--input`, ['color', 'background-color', 'border-color', 'box-shadow']);\n        const formLabel = getStylesFromElement(`${containerId}--label`, ['color']);\n        const formError = getStylesFromElement(`${containerId}--error`, ['color']);\n\n        return formLabel && formInput && formError ? {\n            labelText: formLabel.color,\n            fieldText: formInput.color,\n            fieldPlaceholderText: formInput.color,\n            fieldErrorText: formError.color,\n            fieldBackground: formInput['background-color'],\n            fieldInnerShadow: formInput['box-shadow'],\n            fieldBorder: formInput['border-color'],\n        } : undefined;\n    }, [])\n\n        const options: ShippingInitializeOptions = {\n            stripeupe: {\n                container: 'StripeUpeShipping',\n                onChangeShipping: handleStripeShippingAddress,\n                availableCountries: allowedCountries,\n                getStyles: getStripeStyles,\n                getStripeState: StripeStateMapper,\n                gatewayId: 'stripeupe',\n                methodId: 'card',\n            },\n        };\n\n        const renderCheckoutThemeStylesForStripeUPE = () => {\n            const containerId = 'stripe-card-component-field';\n\n            return (\n                <div\n                    className=\"optimizedCheckout-form-input\"\n                    id={ `${containerId}--input` }\n                    placeholder=\"1111\"\n                >\n                    <div\n                        className=\"form-field--error\"\n                    >\n                        <div\n                            className=\"optimizedCheckout-form-label\"\n                            id={ `${containerId}--error` }\n                        />\n                    </div>\n                    <div\n                        className=\"optimizedCheckout-form-label\"\n                        id={ `${containerId}--label` }\n                    />\n                </div>\n            );\n        };\n\n        return (\n            <>\n                <StripeShippingAddressDisplay\n                    deinitialize={ deinitialize }\n                    initialize={ initializeShipping(options) }\n                    methodId=\"stripeupe\"\n                />\n                { renderCheckoutThemeStylesForStripeUPE() }\n            </>\n        );\n};\n\nexport default memo(StripeShippingAddress);\n","import {\n    Address,\n    CheckoutParams,\n    CheckoutSelectors,\n    Consignment,\n    Country,\n    FormField,\n    RequestOptions,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { FormikProps, withFormik } from 'formik';\nimport { noop } from 'lodash';\nimport React, { PureComponent, ReactNode } from 'react';\nimport { lazy, object } from 'yup';\n\nimport {\n    AddressFormValues,\n    getAddressFormFieldsValidationSchema,\n    getTranslateAddressError,\n    mapAddressToFormValues,\n} from '../../address';\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport { getCustomFormFieldsValidationSchema } from '../../formFields';\nimport { withLanguage, WithLanguageProps } from '../../locale';\nimport { Fieldset, Form, FormContext } from '../../ui/form';\nimport BillingSameAsShippingField from '../BillingSameAsShippingField';\nimport hasSelectedShippingOptions from '../hasSelectedShippingOptions';\nimport ShippingFormFooter from '../ShippingFormFooter';\n\nimport StripeShippingAddress from './StripeShippingAddress';\n\nexport interface SingleShippingFormProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    consignments: Consignment[];\n    countries: Country[];\n    customerMessage: string;\n    isLoading: boolean;\n    isShippingMethodLoading: boolean;\n    isMultiShippingMode: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowOrderComments: boolean;\n    step: CheckoutStepStatus;\n    isStripeLoading?(): void;\n    isStripeAutoStep?(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    getFields(countryCode?: string): FormField[];\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    onSubmit(values: SingleShippingFormValues): void;\n    onUnhandledError?(error: Error): void;\n    updateAddress(\n        address: Partial<Address>,\n        options?: RequestOptions<CheckoutParams>,\n    ): Promise<CheckoutSelectors>;\n}\n\nexport interface SingleShippingFormValues {\n    billingSameAsShipping: boolean;\n    shippingAddress?: AddressFormValues;\n    orderComment: string;\n}\n\ninterface SingleShippingFormState {\n    isUpdatingShippingData: boolean;\n}\n\nclass StripeShippingForm extends PureComponent<\n    SingleShippingFormProps & WithLanguageProps & FormikProps<SingleShippingFormValues>\n    > {\n    static contextType = FormContext;\n\n    state: SingleShippingFormState = {\n        isUpdatingShippingData: false,\n    };\n\n    render(): ReactNode {\n        const {\n            cartHasChanged,\n            isLoading,\n            countries,\n            isStripeLoading,\n            shippingAddress,\n            consignments,\n            shouldShowOrderComments,\n            initialize,\n            isValid,\n            deinitialize,\n            onSubmit,\n            isStripeAutoStep,\n            step,\n            isShippingMethodLoading,\n        } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        return (\n            <Form autoComplete=\"on\">\n                <Fieldset>\n                    <StripeShippingAddress\n                        consignments={consignments}\n                        countries={countries}\n                        deinitialize={deinitialize}\n                        initialize={initialize}\n                        isShippingMethodLoading={isShippingMethodLoading}\n                        isStripeAutoStep={isStripeAutoStep}\n                        isStripeLoading={isStripeLoading}\n                        onAddressSelect={this.handleAddressSelect}\n                        onSubmit={onSubmit}\n                        shippingAddress={shippingAddress}\n                        shouldDisableSubmit={this.shouldDisableSubmit()}\n                        step={step}\n                    />\n                    <div className=\"form-body\">\n                        <BillingSameAsShippingField />\n                    </div>\n                </Fieldset>\n\n                <ShippingFormFooter\n                    renderFooter={true}\n                    cartHasChanged={cartHasChanged}\n                    isLoading={isLoading || isUpdatingShippingData}\n                    isMultiShippingMode={false}\n                    shouldDisableSubmit={this.shouldDisableSubmit()}\n                    shouldShowOrderComments={shouldShowOrderComments}\n                    shouldShowShippingOptions={isValid}\n                />\n            </Form>\n        );\n    }\n\n    private shouldDisableSubmit: () => boolean = () => {\n        const { isLoading, consignments, isValid } = this.props;\n\n        const { isUpdatingShippingData } = this.state;\n\n        if (!isValid) {\n            return false;\n        }\n\n        return isLoading || isUpdatingShippingData || !hasSelectedShippingOptions(consignments);\n    };\n\n    private handleAddressSelect: (address: Address) => void = async (address) => {\n        const { updateAddress, onUnhandledError = noop, values, setValues } = this.props;\n\n        try {\n            await updateAddress(address);\n\n            setValues({\n                ...values,\n                shippingAddress: mapAddressToFormValues(\n                    this.getFields(address.countryCode),\n                    address,\n                ),\n            });\n        } catch (error) {\n            onUnhandledError(error);\n        }\n    };\n\n    private getFields(countryCode: string | undefined): FormField[] {\n        const { getFields } = this.props;\n\n        return getFields(countryCode);\n    }\n}\n\nexport default withLanguage(\n    withFormik<SingleShippingFormProps & WithLanguageProps, SingleShippingFormValues>({\n        handleSubmit: (values, { props: { onSubmit } }) => {\n            onSubmit(values);\n        },\n        mapPropsToValues: ({\n                               getFields,\n                               shippingAddress,\n                               isBillingSameAsShipping,\n                               customerMessage,\n                           }) => ({\n            billingSameAsShipping: isBillingSameAsShipping,\n            orderComment: customerMessage,\n            shippingAddress: mapAddressToFormValues(\n                getFields(shippingAddress && shippingAddress.countryCode),\n                shippingAddress,\n            ),\n        }),\n        isInitialValid: ({ shippingAddress, getFields, language }) =>\n            !!shippingAddress &&\n            getAddressFormFieldsValidationSchema({\n                language,\n                formFields: getFields(shippingAddress.countryCode),\n            }).isValidSync(shippingAddress),\n        validationSchema: ({\n                               language,\n                               getFields,\n                               methodId,\n                           }: SingleShippingFormProps & WithLanguageProps) =>\n            methodId\n                ? object({\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                        getCustomFormFieldsValidationSchema({\n                            translate: getTranslateAddressError(language),\n                            formFields: getFields(formValues && formValues.countryCode),\n                        }),\n                    ),\n                })\n                : object({\n                    shippingAddress: lazy<Partial<AddressFormValues>>((formValues) =>\n                        getAddressFormFieldsValidationSchema({\n                            language,\n                            formFields: getFields(formValues && formValues.countryCode),\n                        }),\n                    ),\n                }),\n        enableReinitialize: false,\n    })(StripeShippingForm),\n);\n","import { Address, CheckoutSelectors, Consignment, Country, Customer, FormField, ShippingInitializeOptions, ShippingRequestOptions } from '@bigcommerce/checkout-sdk';\nimport React, { Component, ReactNode } from 'react';\n\nimport CheckoutStepStatus from '../../checkout/CheckoutStepStatus';\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\nimport ShippingHeader from '../ShippingHeader';\n\nimport StripeShippingForm, { SingleShippingFormValues } from './StripeShippingForm';\n\nexport interface StripeShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    consignments: Consignment[];\n    countries: Country[];\n    customer: Customer;\n    customerMessage: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingMethodLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowAddAddressInCheckout: boolean;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSubmit(values: SingleShippingFormValues): void;\n    onMultiShippingChange(): void;\n    deinitialize(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    initialize(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    updateAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    getFields(countryCode?: string): FormField[];\n}\n\ninterface StripeShippingState {\n    isStripeLoading: boolean;\n    isStripeAutoStep: boolean;\n}\n\nclass StripeShipping extends Component<StripeShippingProps, StripeShippingState> {\n    constructor(props: StripeShippingProps) {\n        super(props);\n\n        this.state = {\n            isStripeLoading: true,\n            isStripeAutoStep: false,\n        };\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            updateAddress,\n            initialize,\n            deinitialize,\n            isMultiShippingMode,\n            step,\n            onSubmit,\n            onMultiShippingChange,\n            isLoading,\n            isShippingMethodLoading,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isStripeLoading,\n            isStripeAutoStep,\n        } = this.state;\n\n        return <>\n            <AddressFormSkeleton isLoading={isStripeAutoStep || isStripeLoading}/>\n            <div className=\"checkout-form\" style={{display: isStripeAutoStep || isStripeLoading ? 'none' : undefined}}>\n                <ShippingHeader\n                    isGuest={isGuest}\n                    isMultiShippingMode={isMultiShippingMode}\n                    onMultiShippingChange={onMultiShippingChange}\n                    shouldShowMultiShipping={shouldShowMultiShipping}\n                />\n                <StripeShippingForm\n                    {...shippingFormProps}\n                    deinitialize={deinitialize}\n                    initialize={initialize}\n                    isBillingSameAsShipping={isBillingSameAsShipping}\n                    isLoading={isLoading}\n                    isMultiShippingMode={isMultiShippingMode}\n                    isStripeAutoStep={this.handleIsAutoStep}\n                    isStripeLoading={this.stripeLoadedCallback}\n                    isShippingMethodLoading={isShippingMethodLoading}\n                    onSubmit={onSubmit}\n                    step={step}\n                    updateAddress={updateAddress}\n                />\n            </div>\n        </>;\n    }\n\n    private stripeLoadedCallback: () => void = () => {\n        this.setState({ isStripeLoading: false });\n    }\n\n    private handleIsAutoStep: () => void = () => {\n        this.setState({ isStripeAutoStep: true });\n    }\n}\n\nexport default StripeShipping;\n","import {\n    Address,\n    AddressRequestBody,\n    Cart,\n    CheckoutRequestBody,\n    CheckoutSelectors,\n    Consignment,\n    ConsignmentAssignmentRequestBody,\n    Country,\n    Customer,\n    CustomerRequestOptions,\n    FormField,\n    ShippingInitializeOptions,\n    ShippingRequestOptions,\n} from '@bigcommerce/checkout-sdk';\nimport { noop } from 'lodash';\nimport React, { Component, ReactNode } from 'react';\nimport { createSelector } from 'reselect';\n\nimport { AddressFormSkeleton } from '@bigcommerce/checkout/ui';\n\nimport { isEqualAddress, mapAddressFromFormValues } from '../address';\nimport { CheckoutContextProps, withCheckout } from '../checkout';\nimport CheckoutStepStatus from '../checkout/CheckoutStepStatus';\nimport { EMPTY_ARRAY, isFloatingLabelEnabled } from '../common/utility';\nimport { PaymentMethodId } from '../payment/paymentMethod';\n\nimport { UnassignItemError } from './errors';\nimport getShippableItemsCount from './getShippableItemsCount';\nimport getShippingMethodId from './getShippingMethodId';\nimport { MultiShippingFormValues } from './MultiShippingForm';\nimport ShippingForm from './ShippingForm';\nimport ShippingHeader from './ShippingHeader';\nimport { SingleShippingFormValues } from './SingleShippingForm';\nimport StripeShipping from './stripeUPE/StripeShipping';\n\nexport interface ShippingProps {\n    isBillingSameAsShipping: boolean;\n    cartHasChanged: boolean;\n    isMultiShippingMode: boolean;\n    step: CheckoutStepStatus;\n    onCreateAccount(): void;\n    onToggleMultiShipping(): void;\n    onReady?(): void;\n    onUnhandledError(error: Error): void;\n    onSignIn(): void;\n    navigateNextStep(isBillingSameAsShipping: boolean): void;\n}\n\nexport interface WithCheckoutShippingProps {\n    billingAddress?: Address;\n    cart: Cart;\n    consignments: Consignment[];\n    countries: Country[];\n    countriesWithAutocomplete: string[];\n    customer: Customer;\n    customerMessage: string;\n    googleMapsApiKey: string;\n    isGuest: boolean;\n    isInitializing: boolean;\n    isLoading: boolean;\n    isShippingStepPending: boolean;\n    methodId?: string;\n    shippingAddress?: Address;\n    shouldShowAddAddressInCheckout: boolean;\n    shouldShowMultiShipping: boolean;\n    shouldShowOrderComments: boolean;\n    providerWithCustomCheckout?: string;\n    useFloatingLabel?: boolean;\n    assignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    deinitializeShippingMethod(options: ShippingRequestOptions): Promise<CheckoutSelectors>;\n    deleteConsignments(): Promise<Address | undefined>;\n    getFields(countryCode?: string): FormField[];\n    initializeShippingMethod(options: ShippingInitializeOptions): Promise<CheckoutSelectors>;\n    loadShippingAddressFields(): Promise<CheckoutSelectors>;\n    loadShippingOptions(): Promise<CheckoutSelectors>;\n    signOut(options?: CustomerRequestOptions): void;\n    createCustomerAddress(address: AddressRequestBody): Promise<CheckoutSelectors>;\n    unassignItem(consignment: ConsignmentAssignmentRequestBody): Promise<CheckoutSelectors>;\n    updateBillingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    updateCheckout(payload: CheckoutRequestBody): Promise<CheckoutSelectors>;\n    updateShippingAddress(address: Partial<Address>): Promise<CheckoutSelectors>;\n    renderForm: Boolean;\n    renderFooter: Boolean;\n}\n\ninterface ShippingState {\n    isInitializing: boolean;\n}\n\nclass Shipping extends Component<ShippingProps & WithCheckoutShippingProps, ShippingState> {\n    constructor(props: ShippingProps & WithCheckoutShippingProps) {\n        super(props);\n\n        this.state = {\n            isInitializing: true,\n        };\n    }\n\n    async componentDidMount(): Promise<void> {\n        const {\n            loadShippingAddressFields,\n            loadShippingOptions,\n            onReady = noop,\n            onUnhandledError = noop,\n            // step,\n            navigateNextStep,\n            isBillingSameAsShipping\n        } = this.props;\n\n        !window.isShippingEditStep && navigateNextStep(isBillingSameAsShipping);\n        window.isShippingEditStep = false;\n\n        try {\n            await Promise.all([loadShippingAddressFields(), loadShippingOptions()]);\n\n            onReady();\n        } catch (error) {\n            onUnhandledError(error);\n        } finally {\n            this.setState({ isInitializing: false });\n        }\n    }\n\n    render(): ReactNode {\n        const {\n            isBillingSameAsShipping,\n            isGuest,\n            shouldShowMultiShipping,\n            customer,\n            unassignItem,\n            updateShippingAddress,\n            initializeShippingMethod,\n            deinitializeShippingMethod,\n            isMultiShippingMode,\n            onToggleMultiShipping,\n            providerWithCustomCheckout,\n            step,\n            useFloatingLabel,\n            renderForm,\n            renderFooter,\n            ...shippingFormProps\n        } = this.props;\n\n        const {\n            isInitializing,\n        } = this.state;\n\n        if (providerWithCustomCheckout === PaymentMethodId.StripeUPE && !customer.email && this.props.countries.length > 0) {\n            return <StripeShipping\n                { ...shippingFormProps }\n                customer={ customer }\n                deinitialize={deinitializeShippingMethod}\n                initialize={initializeShippingMethod}\n                isBillingSameAsShipping={isBillingSameAsShipping}\n                isGuest={ isGuest }\n                isLoading={ isInitializing }\n                isShippingMethodLoading={ this.props.isLoading }\n                isMultiShippingMode={isMultiShippingMode}\n                onMultiShippingChange={ this.handleMultiShippingModeSwitch }\n                onSubmit={this.handleSingleShippingSubmit}\n                shouldShowMultiShipping={ shouldShowMultiShipping }\n                step={step}\n                updateAddress={updateShippingAddress}\n            />;\n        }\n\n        return (\n            <AddressFormSkeleton isLoading={isInitializing}>\n                <div className=\"checkout-form\">\n                    <ShippingHeader\n                        isGuest={isGuest}\n                        isMultiShippingMode={isMultiShippingMode}\n                        onMultiShippingChange={this.handleMultiShippingModeSwitch}\n                        shouldShowMultiShipping={shouldShowMultiShipping}\n                    />\n                    <ShippingForm\n                        renderForm={true}\n                        renderFooter={false}\n                        {...shippingFormProps}\n                        addresses={customer.addresses}\n                        deinitialize={deinitializeShippingMethod}\n                        initialize={initializeShippingMethod}\n                        isBillingSameAsShipping={isBillingSameAsShipping}\n                        isGuest={isGuest}\n                        isMultiShippingMode={isMultiShippingMode}\n                        onMultiShippingSubmit={this.handleMultiShippingSubmit}\n                        onSingleShippingSubmit={this.handleSingleShippingSubmit}\n                        onUseNewAddress={this.handleUseNewAddress}\n                        shouldShowSaveAddress={!isGuest}\n                        updateAddress={updateShippingAddress}\n                        useFloatingLabel={useFloatingLabel}\n                    />\n                </div>\n            </AddressFormSkeleton>\n        );\n    }\n\n    private handleMultiShippingModeSwitch: () => void = async () => {\n        const {\n            consignments,\n            isMultiShippingMode,\n            onToggleMultiShipping = noop,\n            onUnhandledError = noop,\n            updateShippingAddress,\n        } = this.props;\n\n        if (isMultiShippingMode && consignments.length > 1) {\n            this.setState({ isInitializing: true });\n\n            try {\n                // Collapse all consignments into one\n                await updateShippingAddress(consignments[0].shippingAddress);\n            } catch (error) {\n                onUnhandledError(error);\n            } finally {\n                this.setState({ isInitializing: false });\n            }\n        }\n\n        onToggleMultiShipping();\n    };\n\n    private handleSingleShippingSubmit: (values: SingleShippingFormValues) => void = async ({\n        billingSameAsShipping,\n        shippingAddress: addressValues,\n        orderComment,\n    }) => {\n        const {\n            customerMessage,\n            updateCheckout,\n            updateShippingAddress,\n            updateBillingAddress,\n            navigateNextStep,\n            onUnhandledError,\n            shippingAddress,\n            billingAddress,\n            methodId,\n        } = this.props;\n\n        const updatedShippingAddress = addressValues && mapAddressFromFormValues(addressValues);\n        const promises: Array<Promise<CheckoutSelectors>> = [];\n        const hasRemoteBilling = this.hasRemoteBilling(methodId);\n\n        if (!isEqualAddress(updatedShippingAddress, shippingAddress) || shippingAddress?.shouldSaveAddress !== updatedShippingAddress?.shouldSaveAddress) {\n            promises.push(updateShippingAddress(updatedShippingAddress || {}));\n        }\n\n        if (\n            billingSameAsShipping &&\n            updatedShippingAddress &&\n            !isEqualAddress(updatedShippingAddress, billingAddress) &&\n            !hasRemoteBilling\n        ) {\n            promises.push(updateBillingAddress(updatedShippingAddress));\n        }\n\n        if (customerMessage !== orderComment) {\n            promises.push(updateCheckout({ customerMessage: orderComment }));\n        }\n\n        try {\n            await Promise.all(promises);\n\n            navigateNextStep(billingSameAsShipping);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n\n    private hasRemoteBilling: (methodId?: string) => boolean = (methodId) => {\n        const PAYMENT_METHOD_VALID = ['amazonpay'];\n\n        return PAYMENT_METHOD_VALID.some((method) => method === methodId);\n    };\n\n    private handleUseNewAddress: (address: Address, itemId: string) => void = async (\n        address,\n        itemId,\n    ) => {\n        const { unassignItem, onUnhandledError } = this.props;\n\n        try {\n            await unassignItem({\n                address,\n                lineItems: [\n                    {\n                        quantity: 1,\n                        itemId,\n                    },\n                ],\n            });\n\n            location.href = '/account.php?action=add_shipping_address&from=checkout';\n        } catch (error) {\n            if (error instanceof UnassignItemError) {\n                onUnhandledError(new UnassignItemError(error));\n            }\n        }\n    };\n\n    private handleMultiShippingSubmit: (values: MultiShippingFormValues) => void = async ({\n        orderComment,\n    }) => {\n        const { customerMessage, updateCheckout, navigateNextStep, onUnhandledError } = this.props;\n\n        try {\n            if (customerMessage !== orderComment) {\n                await updateCheckout({ customerMessage: orderComment });\n            }\n\n            navigateNextStep(false);\n        } catch (error) {\n            if (error instanceof Error) {\n                onUnhandledError(error);\n            }\n        }\n    };\n}\n\nconst deleteConsignmentsSelector = createSelector(\n    ({ checkoutService: { deleteConsignment } }: CheckoutContextProps) => deleteConsignment,\n    ({ checkoutState: { data } }: CheckoutContextProps) => data.getConsignments(),\n    (deleteConsignment, consignments) => async () => {\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        const [{ data }] = await Promise.all(consignments.map(({ id }) => deleteConsignment(id)));\n\n        return data.getShippingAddress();\n    },\n);\n\n// tslint:disable-next-line:cyclomatic-complexity\nexport function mapToShippingProps({\n    checkoutService,\n    checkoutState,\n}: CheckoutContextProps): WithCheckoutShippingProps | null {\n    const {\n        data: {\n            getCart,\n            getCheckout,\n            getConfig,\n            getCustomer,\n            getConsignments,\n            getShippingAddress,\n            getBillingAddress,\n            getShippingAddressFields,\n            getShippingCountries,\n        },\n        statuses: {\n            isShippingStepPending,\n            isSelectingShippingOption,\n            isLoadingShippingOptions,\n            isUpdatingConsignment,\n            isCreatingConsignments,\n            isCreatingCustomerAddress,\n            isLoadingShippingCountries,\n            isUpdatingBillingAddress,\n            isUpdatingCheckout,\n        },\n    } = checkoutState;\n\n    const checkout = getCheckout();\n    const config = getConfig();\n    const consignments = getConsignments() || [];\n    const customer = getCustomer();\n    const cart = getCart();\n\n    if (!checkout || !config || !customer || !cart) {\n        return null;\n    }\n\n    const {\n        checkoutSettings: {\n            enableOrderComments,\n            features,\n            hasMultiShippingEnabled,\n            googleMapsApiKey,\n        },\n    } = config;\n\n    const methodId = getShippingMethodId(checkout);\n    const shippableItemsCount = getShippableItemsCount(cart);\n    const isLoading =\n        isLoadingShippingOptions() ||\n        isSelectingShippingOption() ||\n        isUpdatingConsignment() ||\n        isCreatingConsignments() ||\n        isUpdatingBillingAddress() ||\n        isUpdatingCheckout() ||\n        isCreatingCustomerAddress();\n    const shouldShowMultiShipping =\n        hasMultiShippingEnabled && !methodId && shippableItemsCount > 1 && shippableItemsCount < 50;\n    const countriesWithAutocomplete = ['US', 'CA', 'AU', 'NZ'];\n\n    if (features['CHECKOUT-4183.checkout_google_address_autocomplete_uk']) {\n        countriesWithAutocomplete.push('GB');\n    }\n\n    const shippingAddress =\n        !shouldShowMultiShipping && consignments.length > 1 ? undefined : getShippingAddress();\n\n    return {\n        assignItem: checkoutService.assignItemsToAddress,\n        billingAddress: getBillingAddress(),\n        cart,\n        consignments,\n        countries: getShippingCountries() || EMPTY_ARRAY,\n        countriesWithAutocomplete,\n        customer,\n        customerMessage: checkout.customerMessage,\n        createCustomerAddress: checkoutService.createCustomerAddress,\n        deinitializeShippingMethod: checkoutService.deinitializeShipping,\n        deleteConsignments: deleteConsignmentsSelector({ checkoutService, checkoutState }),\n        getFields: getShippingAddressFields,\n        googleMapsApiKey,\n        initializeShippingMethod: checkoutService.initializeShipping,\n        isGuest: customer.isGuest,\n        isInitializing: isLoadingShippingCountries() || isLoadingShippingOptions(),\n        isLoading,\n        isShippingStepPending: isShippingStepPending(),\n        loadShippingAddressFields: checkoutService.loadShippingAddressFields,\n        loadShippingOptions: checkoutService.loadShippingOptions,\n        methodId,\n        providerWithCustomCheckout: config.checkoutSettings.providerWithCustomCheckout || undefined,\n        shippingAddress,\n        shouldShowMultiShipping,\n        shouldShowAddAddressInCheckout:\n            features['CHECKOUT-4726.add_address_in_multishipping_checkout'],\n        shouldShowOrderComments: enableOrderComments,\n        signOut: checkoutService.signOutCustomer,\n        unassignItem: checkoutService.unassignItemsToAddress,\n        updateBillingAddress: checkoutService.updateBillingAddress,\n        updateCheckout: checkoutService.updateCheckout,\n        updateShippingAddress: checkoutService.updateShippingAddress,\n        useFloatingLabel: isFloatingLabelEnabled(config.checkoutSettings),\n        renderForm: true,\n        renderFooter: true,\n    };\n}\n\nexport default withCheckout(mapToShippingProps)(Shipping);\n"],"names":["data","name","message","getLanguageService","translate","UnassignItemError","prototype","CustomError","SaveAddressForm","withLanguage","withFormik","handleSubmit","values","onSaveAddress","mapPropsToValues","defaultCountryCode","firstName","lastName","address1","address2","customFields","country","countryCode","stateOrProvince","stateOrProvinceCode","postalCode","phone","city","company","shouldSaveAddress","validationSchema","language","getFields","getAddressFormFieldsValidationSchema","formFields","googleMapsApiKey","countriesWithAutocomplete","countries","setFieldValue","isLoading","onRequestClose","useFloatingLabel","Form","autoComplete","LoadingOverlay","AddressForm","shouldShowSaveAddress","className","href","onClick","preventDefault","TranslatedString","id","Button","disabled","type","variant","isOpen","onAfterOpen","addressFormProps","Modal","additionalModalClassName","header","ModalHeader","shouldShowCloseButton","title","AssignItemInvalidAddressError","AssignItemFailedError","memo","item","key","imageUrl","quantity","options","consignment","addresses","onSelectAddress","onUseNewAddress","handleUseNewAddress","useCallback","address","handleSelectAddress","alt","src","map","optionName","value","nameId","AddressSelect","selectedAddress","shippingAddress","render","this","props","cartHasChanged","isMultiShippingMode","shouldShowOrderComments","shouldShowShippingOptions","shouldDisableSubmit","renderFooter","Fieldset","legend","Legend","Alert","ShippingOptions","isUpdatingAddress","OrderComments","PureComponent","updateShippableItems","items","updatedItemIndex","cart","consignments","length","cartItemIds","lineItems","physicalItems","updatedConsignment","find","isEqualAddress","newId","matchingCartItems","filter","productId","variantId","matchingCartItemIds","lineItemIds","includes","findNewItemId","i","itemId","findConsignment","state","handleCloseErrorModal","setState","createCustomerAddressError","undefined","handleSaveAddress","createCustomerAddress","itemAddingAddress","mapAddressFromFormValues","Error","itemKey","handleCloseAddAddressForm","assignItem","onUnhandledError","isValidAddress","syncItems","hasSelectedShippingOptions","currentItems","findIndex","getCart","getConsignments","getDerivedStateFromProps","getShippableItemsCount","getShippableLineItems","isGuest","onSignIn","onCreateAccount","renderForm","TranslatedLink","ErrorModal","error","onClose","shouldShowErrorCode","hasUnassignedLineItems","onSubmit","orderComment","enableReinitialize","MultiShippingForm","onChange","labelContent","useMemo","CheckboxFormField","addressFieldName","fieldName","fieldValue","formFieldName","field","custom","handleChange","onFieldChange","handleAutocompleteToggle","inputValue","onAddressSelect","formAddress","hasAddresses","hasValidCustomerAddress","isValidCustomerAddress","unmountContentWhenLoading","onAutocompleteToggle","Component","connectFormik","ShippingAddressForm","handleFieldValueChange","componentDidMount","initialize","methodId","noop","componentWillUnmount","deinitialize","buttonId","customFormFields","shouldShowCustomFormFields","style","padding","StaticAddress","size","testId","DynamicFormField","parentFieldName","hasRequestedShippingOptions","isShippingStepPending","setSubmitted","useContext","initializeShipping","memoizeOne","defaultOptions","editAddressButtonId","amazonpay","SHIPPING_ADDRESS_FIELDS","isResettingAddress","isUpdatingShippingData","isValid","handleFieldChange","Promise","resolve","setTimeout","isShippingField","updateAddressWithFormData","handleAddressSelect","updateAddress","setValues","mapAddressToFormValues","deleteConsignments","debouncedUpdateAddress","debounce","includeShippingOptions","params","include","addressForm","shouldShowBillingSameAsShipping","some","method","updatedShippingAddress","contextType","billingSameAsShipping","isInitialValid","isValidSync","formValues","getCustomFormFieldsValidationSchema","SingleShippingForm","customerMessage","isBillingSameAsShipping","onMultiShippingSubmit","onSingleShippingSubmit","shouldShowAddAddressInCheckout","signOut","ShippingForm","onMultiShippingChange","shouldShowMultiShipping","width","StripeStateMapper","stateList","Object","keys","getStripeState","step","isStripeLoading","isStripeAutoStep","isShippingMethodLoading","useState","isNewAddress","setIsNewAddress","isFirstShippingRender","setIsFirstShippingRender","stripeShippingAddress","setStripeShippingAddress","handleLoading","useEffect","availableShippingOptions","getRecommendedShippingOption","containerId","availableShippingList","code","allowedCountries","join","handleStripeShippingAddress","shipping","complete","phoneFieldRequired","line1","line2","postal_code","stepCompleted","isComplete","shippingPopulated","shouldShowContent","names","split","shippingValue","current","getStylesFromElement","properties","parentContainer","document","getElementById","getAppliedStyles","getStripeStyles","formInput","formLabel","formError","labelText","color","fieldText","fieldPlaceholderText","fieldErrorText","fieldBackground","fieldInnerShadow","fieldBorder","stripeupe","container","onChangeShipping","availableCountries","getStyles","gatewayId","placeholder","StripeShippingForm","stripeLoadedCallback","handleIsAutoStep","shippingFormProps","AddressFormSkeleton","display","handleMultiShippingModeSwitch","onToggleMultiShipping","updateShippingAddress","isInitializing","handleSingleShippingSubmit","addressValues","updateCheckout","updateBillingAddress","navigateNextStep","billingAddress","promises","hasRemoteBilling","push","all","unassignItem","location","handleMultiShippingSubmit","loadShippingAddressFields","loadShippingOptions","onReady","window","isShippingEditStep","customer","initializeShippingMethod","deinitializeShippingMethod","providerWithCustomCheckout","PaymentMethodId","email","deleteConsignmentsSelector","createSelector","deleteConsignment","getShippingAddress","mapToShippingProps","checkoutService","checkoutState","getCheckout","getConfig","getCustomer","getBillingAddress","getShippingAddressFields","getShippingCountries","isSelectingShippingOption","isLoadingShippingOptions","isUpdatingConsignment","isCreatingConsignments","isCreatingCustomerAddress","isLoadingShippingCountries","isUpdatingBillingAddress","isUpdatingCheckout","checkout","config","enableOrderComments","features","hasMultiShippingEnabled","getShippingMethodId","shippableItemsCount","assignItemsToAddress","deinitializeShipping","checkoutSettings","signOutCustomer","unassignItemsToAddress","isFloatingLabelEnabled","withCheckout","Shipping"],"sourceRoot":""}